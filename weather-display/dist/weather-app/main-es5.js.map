{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/alert/alert.component.ts","webpack:///src/app/alert/alert.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/current-weather/current-weather.component.ts","webpack:///src/app/current-weather/current-weather.component.html","webpack:///src/app/forecast/forecast.component.ts","webpack:///src/app/forecast/forecast.component.html","webpack:///src/app/location-search/location-search.component.ts","webpack:///src/app/location-search/location-search.component.html","webpack:///src/app/services/location-conversion.service.ts","webpack:///src/app/services/weather-lookup.service.ts","webpack:///src/app/weather-dashboard/weather-dashboard.component.ts","webpack:///src/app/weather-dashboard/weather-dashboard.component.html","webpack:///src/app/weather-dashboard/weather.module.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AlertComponent","dialogRef","data","selector","templateUrl","styleUrls","AppComponent","title","AppModule","declarations","imports","providers","bootstrap","CurrentWeatherComponent","dialog","locationQuery","weatherQuery","event","emit","open","height","alerts","icon","image","getLocations","queryWeather","ForecastComponent","LocationSearchComponent","position","search","required","isValidSearch","setValue","value","valueChanges","subscribe","valid","locationOptions","validateSearchTerm","onLocationSelected","LocationConverstionService","httpClient","location","get","WeatherLookupService","geocode","latitude","longitude","WeatherDashboard","locationConverstionService","weatherService","getLocationList","places","getLatLong","getWeather","weather","currentWeather","currently","hourly","daily","timezone","WeatherModule","environment","production","bootstrapModule","catch","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, Inject } from \"@angular/core\";\r\nimport { WeatherResponse } from \"../models/weather-response.interface\";\r\nimport {\r\n  MatDialog,\r\n  MatDialogRef,\r\n  MAT_DIALOG_DATA\r\n} from \"@angular/material/dialog\";\r\n\r\n@Component({\r\n  selector: \"alert-component\",\r\n  templateUrl: \"./alert.component.html\",\r\n  styleUrls: []\r\n})\r\nexport class AlertComponent {\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AlertComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: WeatherResponse[\"alerts\"]\r\n  ) {}\r\n}\r\n","<div class=\"container\" *ngFor=\"let alert of data\">\r\n  <h1 mat-dialog-title>{{ alert?.title }}</h1>\r\n  <div mat-dialog-content>\r\n    <h2>{{ alert?.severity }}</h2>\r\n    <h3>Issued: {{ alert?.time * 1000 | date: \"medium\" }}</h3>\r\n    <h3>Expires: {{ alert?.expires * 1000 | date: \"medium\" }}</h3>\r\n    <h3>Affected regions: {{ alert?.regions }}</h3>\r\n    <p>{{ alert?.description }}</p>\r\n  </div>\r\n</div>\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'weather-app';\r\n}\r\n","<weather-dashboard></weather-dashboard>\r\n","import { BrowserModule } from \"@angular/platform-browser\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { NgModule } from \"@angular/core\";\r\nimport { MatToolbarModule } from \"@angular/material/toolbar\";\r\n\r\nimport { WeatherModule } from \"./weather-dashboard/weather.module\";\r\n\r\nimport { AppComponent } from \"./app.component\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    CommonModule,\r\n    WeatherModule,\r\n    MatToolbarModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {}\r\n","import { Component, OnInit, Input, Output } from \"@angular/core\";\r\nimport { WeatherData } from \"../models/weather-data.interface\";\r\nimport { EventEmitter } from \"@angular/core\";\r\nimport { MatDialog } from \"@angular/material/dialog\";\r\nimport { AlertComponent } from \"../alert/alert.component\";\r\nimport { WeatherResponse } from \"../models/weather-response.interface\";\r\n\r\n@Component({\r\n  selector: \"current-weather\",\r\n  templateUrl: \"./current-weather.component.html\",\r\n  styleUrls: [\"./current-weather.component.scss\"]\r\n})\r\nexport class CurrentWeatherComponent implements OnInit {\r\n  @Input() currentWeather: WeatherData;\r\n  @Input() location: string;\r\n  @Input() locationOptions: string[];\r\n  @Input() alerts: WeatherResponse[\"alerts\"];\r\n  @Output() locationQuery: EventEmitter<string> = new EventEmitter();\r\n  @Output() weatherQuery: EventEmitter<string> = new EventEmitter();\r\n\r\n  constructor(public dialog: MatDialog) {}\r\n\r\n  ngOnInit() {}\r\n\r\n  getLocations(event: string) {\r\n    this.locationQuery.emit(event);\r\n  }\r\n\r\n  queryWeather(event: string) {\r\n    this.weatherQuery.emit(event);\r\n  }\r\n\r\n  getAlerts() {\r\n    const dialogRef = this.dialog.open(AlertComponent, {\r\n      height: \"300px\",\r\n      data: this.alerts\r\n    });\r\n  }\r\n\r\n  getIcon(icon: string): string {\r\n    switch (icon) {\r\n      case \"clear-day\":\r\n        return \"wi wi-day-sunny\";\r\n      case \"clear-night\":\r\n        return \"wi wi-night-clear\";\r\n      case \"partly-cloudy-day\":\r\n        return \"wi wi-day-cloudy\";\r\n      case \"partly-cloudy-night\":\r\n        return \"wi wi-night-cloudy\";\r\n      case \"cloudy\":\r\n        return \"wi wi-cloudy\";\r\n      case \"rain\":\r\n        return \"wi wi-rain\";\r\n      case \"sleet\":\r\n        return icon;\r\n      case \"snow\":\r\n        return \"wi wi-snow\";\r\n      case \"wind\":\r\n        return \"wi wi-windy\";\r\n      case \"fog\":\r\n        return \"wi wi-fog\";\r\n    }\r\n  }\r\n\r\n  getBackground(icon: string): string {\r\n    let image: string;\r\n    switch (icon) {\r\n      case \"clear-day\":\r\n        image = \"clear-day.jpg\";\r\n        break;\r\n      case \"clear-night\":\r\n        image = \"clear-night.jpg\";\r\n        break;\r\n      case \"partly-cloudy-day\":\r\n        image = \"partly-cloudy-day.jpg\";\r\n        break;\r\n      case \"partly-cloudy-night\":\r\n        image = \"partly-cloudy-night.jpg\";\r\n        break;\r\n      case \"cloudy\":\r\n        image = \"cloudy.jpg\";\r\n        break;\r\n      case \"rain\":\r\n        image = \"rain.jpg\";\r\n        break;\r\n      case \"sleet\":\r\n        image = \"sleet.jpg\";\r\n        break;\r\n      case \"snow\":\r\n        image = \"snow.jpg\";\r\n        break;\r\n      case \"wind\":\r\n        image = \"wind.jpg\";\r\n        break;\r\n      case \"fog\":\r\n        image = \"fog.jpg\";\r\n        break;\r\n      default:\r\n        image = \"clear-day.jpg\";\r\n        break;\r\n    }\r\n    return `../../../assets/images/${image}`;\r\n  }\r\n}\r\n","<div\r\n  class=\"background\"\r\n  [ngStyle]=\"{\r\n    'background-image': currentWeather?.icon\r\n      ? 'url(' + getBackground(currentWeather?.icon) + ')'\r\n      : 'url(../../../assets/images/partly-cloudy-day.jpg)'\r\n  }\"\r\n>\r\n  <location-search\r\n    class=\"search-bar\"\r\n    [locationOptions]=\"locationOptions\"\r\n    (locationQuery)=\"getLocations($event)\"\r\n    (weatherQuery)=\"queryWeather($event)\"\r\n  >\r\n  </location-search>\r\n\r\n  <div class=\"weather-dashboard\">\r\n    <div class=\"weather-content\">\r\n      <span\r\n        >{{ location }}\r\n        <button\r\n          mat-icon-button\r\n          *ngIf=\"alerts?.length > 0\"\r\n          class=\"alert\"\r\n          (click)=\"getAlerts()\"\r\n        >\r\n          <mat-icon>warning</mat-icon>\r\n        </button>\r\n      </span>\r\n      <p class=\"caption\">\r\n        {{ currentWeather?.time * 1000 | date: \"medium\" }}\r\n      </p>\r\n      <span id=\"temperature\"\r\n        >{{ currentWeather?.temperature | number: \"1.0-0\"\r\n        }}<i id=\"degree\" class=\"wi wi-fahrenheit\"></i\r\n      ></span>\r\n      <i\r\n        *ngIf=\"currentWeather\"\r\n        class=\"weather-icon\"\r\n        [ngClass]=\"getIcon(currentWeather?.icon)\"\r\n      ></i>\r\n      <div class=\"weather-forecast\">{{ currentWeather?.summary }}</div>\r\n    </div>\r\n\r\n    <div class=\"weather-metrics\">\r\n      <span class=\"item\">\r\n        <i class=\"wi wi-thermometer\"></i>\r\n        Feels like:\r\n        {{ currentWeather?.apparentTemperature | number: \"1.0-0\" }}\r\n        <i class=\"wi wi-fahrenheit\"></i\r\n      ></span>\r\n      <span class=\"item\">\r\n        <i class=\"wi wi-humidity\"></i>\r\n        Humidity: {{ currentWeather?.humidity | number: \"1.0-0\" }}%</span\r\n      >\r\n      <span class=\"item\">\r\n        <i class=\"wi wi-umbrella\"></i>\r\n        Chance of rain:\r\n        {{ currentWeather?.precipProbability | number: \"1.0-0\" }} %\r\n      </span>\r\n      <span class=\"item\">\r\n        <i class=\"wi wi-strong-wind\"></i>\r\n        Wind speed: {{ currentWeather?.windSpeed | number: \"1.0-0\" }} mph</span\r\n      >\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, Input } from \"@angular/core\";\r\nimport { Weather } from \"../models/weather.interface\";\r\n\r\n@Component({\r\n  selector: \"forecast-component\",\r\n  templateUrl: \"./forecast.component.html\",\r\n  styleUrls: [\"./forecast.component.scss\"]\r\n})\r\nexport class ForecastComponent {\r\n  @Input() forecast: Weather;\r\n  constructor() {}\r\n\r\n  getIcon(icon: string): string {\r\n    switch (icon) {\r\n      case \"clear-day\":\r\n        return \"wi wi-day-sunny\";\r\n      case \"clear-night\":\r\n        return \"wi wi-night-clear\";\r\n      case \"partly-cloudy-day\":\r\n        return \"wi wi-day-cloudy\";\r\n      case \"partly-cloudy-night\":\r\n        return \"wi wi-night-cloudy\";\r\n      case \"cloudy\":\r\n        return \"wi wi-cloudy\";\r\n      case \"rain\":\r\n        return \"wi wi-rain\";\r\n      case \"sleet\":\r\n        return \"wi wi-sleet\";\r\n      case \"snow\":\r\n        return \"wi wi-snow\";\r\n      case \"wind\":\r\n        return \"wi wi-windy\";\r\n      case \"fog\":\r\n        return \"wi wi-fog\";\r\n    }\r\n  }\r\n}\r\n","<ng-container *ngIf=\"forecast?.data\">\r\n  <div class=\"card\">\r\n    <div class=\"card-body\">\r\n      <ng-content select=\"h1\"></ng-content>\r\n      <h2 class=\"card-subtitle\">Summary:</h2>\r\n      <p>{{ forecast?.summary }}</p>\r\n    </div>\r\n    <div class=\"container\">\r\n      <div\r\n        class=\"met border text-center\"\r\n        *ngFor=\"let met of forecast?.data; let i = index\"\r\n      >\r\n        <div class=\"header\">\r\n          {{\r\n            met?.time * 1000\r\n              | date\r\n                : ((this.forecast?.data)[0].temperatureHigh == null\r\n                    ? \"shortTime\"\r\n                    : \"EEEE\")\r\n          }}\r\n        </div>\r\n        <i id=\"icon\" class=\"{{ getIcon(met?.icon) }}\"></i>\r\n        <div class=\"content\">\r\n          <div class=\"summary\">{{ met?.summary }}</div>\r\n          <div class=\"summary\">{{ met?.temperature }}</div>\r\n          <ng-container *ngIf=\"met?.moonPhase\">\r\n            <div class=\"item pair\">\r\n              <span\r\n                >High: {{ met?.temperatureHigh | number: \"1.0-0\"\r\n                }}<i id=\"degree\" class=\"wi wi-fahrenheit\"></i\r\n              ></span>\r\n\r\n              <span\r\n                >Low: {{ met?.temperatureLow | number: \"1.0-0\"\r\n                }}<i id=\"degree\" class=\"wi wi-fahrenheit\"></i\r\n              ></span>\r\n            </div>\r\n            <span\r\n              >High: {{ met?.temperature | number: \"1.0-0\"\r\n              }}<i id=\"degree\" class=\"wi wi-fahrenheit\"></i\r\n            ></span>\r\n            <div class=\"item\">\r\n              <i class=\"wi wi-sunrise\"></i> Sunrise at:\r\n              {{ met?.sunriseTime * 1000 | date: \"shortTime\" }}\r\n            </div>\r\n            <div class=\"item\">\r\n              <i class=\"wi wi-sunset\"></i> Sunset at:\r\n              {{ met?.sunsetTime * 1000 | date: \"shortTime\" }}\r\n            </div>\r\n            <div class=\"pair\">\r\n              <div class=\"item\">\r\n                <span\r\n                  ><i class=\"wi wi-strong-wind\"></i> Windpeed:\r\n                  {{ met?.windSpeed | number: \"1.0-0\" }} mph</span\r\n                >\r\n              </div>\r\n              <div class=\"item\">\r\n                <span\r\n                  ><i class=\"wi wi-humidity\"></i> Humidity:\r\n                  {{ met?.humidity | number: \"1.0-0\" }}%</span\r\n                >\r\n              </div>\r\n            </div>\r\n            <div class=\"item\">\r\n              <i\r\n                class=\"wi\"\r\n                [ngClass]=\"{\r\n                  'wi-umbrella': met?.precipType === 'rain',\r\n                  'wi-snowflake-cold': met?.precipType === 'snow'\r\n                }\"\r\n              ></i>\r\n              {{ met?.precipProbability | number: \"1.0-0\" }}% Chance of\r\n              {{ met?.precipType }}\r\n            </div>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n","import { Component, OnInit, Input, Output } from \"@angular/core\";\r\nimport { FormControl, Validators } from \"@angular/forms\";\r\nimport { EventEmitter } from \"@angular/core\";\r\nimport { MatOption } from \"@angular/material/core\";\r\n\r\n@Component({\r\n  selector: \"location-search\",\r\n  templateUrl: \"./location-search.component.html\",\r\n  styleUrls: [\"./location-search.component.scss\"]\r\n})\r\nexport class LocationSearchComponent implements OnInit {\r\n  @Input(\"matAutocompletePosition\") position = \"below\";\r\n  @Input()\r\n  locationOptions: string[];\r\n  @Output() locationQuery: EventEmitter<string> = new EventEmitter();\r\n  search: FormControl = new FormControl(\"\", [Validators.required]);\r\n  @Output() weatherQuery: EventEmitter<string> = new EventEmitter();\r\n  isValidSearch: boolean = false;\r\n  constructor() {}\r\n\r\n  ngOnInit(): void {\r\n    this.search.setValue(\"Baltimore,MD,USA\");\r\n    this.weatherQuery.emit(this.search.value);\r\n    this.search.valueChanges.subscribe((value: string) => {\r\n      if (this.search.valid) {\r\n        this.locationQuery.emit(value);\r\n      }\r\n    });\r\n  }\r\n\r\n  validateSearchTerm(search: FormControl) {\r\n    if (search.value in this.locationOptions) {\r\n      return null;\r\n    }\r\n    return {\r\n      isValidSearch: {\r\n        valid: false\r\n      }\r\n    };\r\n  }\r\n\r\n  onLocationSelected(event: MatOption) {\r\n    if (this.validateSearchTerm(this.search)) {\r\n      this.weatherQuery.emit(event.value);\r\n    }\r\n  }\r\n}\r\n","<mat-form-field appearance=\"fill\" class=\"search-bar\">\r\n  <mat-label>Search Location</mat-label>\r\n  <mat-icon matPrefix>search</mat-icon>\r\n  <input\r\n    matInput\r\n    [formControl]=\"search\"\r\n    id=\"search-term\"\r\n    type=\"text\"\r\n    placeholder=\"Enter city or zip\"\r\n    [matAutocomplete]=\"searchOptions\"\r\n    matAutocompletePosition=\"below\"\r\n  />\r\n  <button matSuffix mat-icon-button (click)=\"search.setValue('')\">\r\n    <mat-icon>clear</mat-icon>\r\n  </button>\r\n  <mat-autocomplete\r\n    autoActiveFirstOption\r\n    #searchOptions=\"matAutocomplete\"\r\n    (optionSelected)=\"onLocationSelected($event.option)\"\r\n  >\r\n    <mat-option *ngFor=\"let location of locationOptions\" [value]=\"location\">\r\n      {{ location }}\r\n    </mat-option>\r\n  </mat-autocomplete>\r\n  <mat-error *ngIf=\"search.invalid\"\r\n    >Please select a value from the list</mat-error\r\n  >\r\n</mat-form-field>\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { Observable } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class LocationConverstionService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getLocationList(location: string): Observable<string[]> {\r\n    return this.httpClient.get<string[]>(\r\n      `/api/get-auto-complete-locations/${location}`\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { LatLong } from \"../models/latlong.interface\";\r\nimport { Observable } from \"rxjs\";\r\nimport { WeatherResponse } from \"../models/weather-response.interface\";\r\n\r\n@Injectable()\r\nexport class WeatherLookupService {\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  getLatLong(location: string): Observable<LatLong> {\r\n    return this.httpClient.get<LatLong>(\r\n      `/api/convert-location-to-geocode/${location}`\r\n    );\r\n  }\r\n\r\n  getWeather(geocode: LatLong): Observable<WeatherResponse> {\r\n    return this.httpClient.get<WeatherResponse>(\r\n      `/api/get-current-weather-data/${geocode.latitude}/${geocode.longitude}`\r\n    );\r\n  }\r\n}\r\n","import { Component, OnInit, Input, Output } from \"@angular/core\";\r\nimport { LocationConverstionService } from \"src/app/services/location-conversion.service\";\r\nimport { WeatherLookupService } from \"src/app/services/weather-lookup.service\";\r\nimport { LatLong } from \"src/app/models/latlong.interface\";\r\nimport { WeatherResponse } from \"src/app/models/weather-response.interface\";\r\nimport { WeatherData } from \"../models/weather-data.interface\";\r\nimport { Weather } from \"../models/weather.interface\";\r\n\r\n@Component({\r\n  selector: \"weather-dashboard\",\r\n  templateUrl: \"./weather-dashboard.component.html\",\r\n  styleUrls: [\"./weather-dashboard.component.scss\"]\r\n})\r\nexport class WeatherDashboard implements OnInit {\r\n  @Input(\"matAutocompletePosition\") position = \"below\";\r\n  locationOptions: string[];\r\n  location: string = \"Baltimore,MD,USA\";\r\n  currentWeather: WeatherData;\r\n  hourly: Weather;\r\n  daily: Weather;\r\n  alerts: WeatherResponse[\"alerts\"];\r\n  timezone: WeatherResponse[\"timezone\"];\r\n  isValidSearch: boolean = false;\r\n  constructor(\r\n    private locationConverstionService: LocationConverstionService,\r\n    private weatherService: WeatherLookupService\r\n  ) {}\r\n\r\n  ngOnInit(): void {}\r\n\r\n  locationQuery(event: string) {\r\n    this.locationConverstionService\r\n      .getLocationList(event)\r\n      .subscribe((places: string[]) => {\r\n        this.locationOptions = places;\r\n      });\r\n  }\r\n\r\n  queryWeather(event: string) {\r\n    this.location = event;\r\n    this.weatherService.getLatLong(event).subscribe((geocode: LatLong) => {\r\n      this.weatherService\r\n        .getWeather(geocode)\r\n        .subscribe((weather: WeatherResponse) => {\r\n          this.currentWeather = weather.currently;\r\n          this.hourly = weather.hourly;\r\n          this.daily = weather.daily;\r\n          this.alerts = weather.alerts;\r\n          this.timezone = weather.timezone;\r\n        });\r\n    });\r\n  }\r\n}\r\n","<current-weather\r\n  [currentWeather]=\"currentWeather\"\r\n  [location]=\"location\"\r\n  [locationOptions]=\"locationOptions\"\r\n  [alerts]=\"alerts\"\r\n  (locationQuery)=\"locationQuery($event)\"\r\n  (weatherQuery)=\"queryWeather($event)\"\r\n></current-weather>\r\n<forecast-component [forecast]=\"hourly\">\r\n  <h1 class=\"card-title\">48-Hour Forecast</h1>\r\n</forecast-component>\r\n\r\n<forecast-component [forecast]=\"daily\">\r\n  <h1 class=\"card-title\">7-Day met</h1>\r\n</forecast-component>\r\n","import { NgModule } from \"@angular/core\";\r\nimport { CommonModule } from \"@angular/common\";\r\nimport { MatCardModule } from \"@angular/material/card\";\r\n\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatInputModule } from \"@angular/material/input\";\r\nimport { ReactiveFormsModule } from \"@angular/forms\";\r\nimport { MatIconModule } from \"@angular/material/icon\";\r\nimport { MatAutocompleteModule } from \"@angular/material/autocomplete\";\r\nimport { MatButtonModule } from \"@angular/material/button\";\r\n\r\nimport { LocationSearchComponent } from \"../location-search/location-search.component\";\r\nimport { LocationConverstionService } from \"../services/location-conversion.service\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\nimport { WeatherLookupService } from \"../services/weather-lookup.service\";\r\nimport { WeatherDashboard } from \"./weather-dashboard.component\";\r\nimport { CurrentWeatherComponent } from \"../current-weather/current-weather.component\";\r\nimport { ForecastComponent } from \"../forecast/forecast.component\";\r\nimport { MatDialogModule } from \"@angular/material/dialog\";\r\nimport { AlertComponent } from \"../alert/alert.component\";\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LocationSearchComponent,\r\n    CurrentWeatherComponent,\r\n    WeatherDashboard,\r\n    ForecastComponent,\r\n    AlertComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n    MatInputModule,\r\n    MatIconModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [LocationConverstionService, WeatherLookupService],\r\n  exports: [\r\n    LocationSearchComponent,\r\n    CurrentWeatherComponent,\r\n    WeatherDashboard,\r\n    ForecastComponent,\r\n    AlertComponent\r\n  ]\r\n})\r\nexport class WeatherModule {}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}